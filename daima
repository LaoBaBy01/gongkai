//@version=5
indicator(title="RSI(100至-100)", shorttitle="RSI(100至-100)", format=format.price, precision=2)

//RSI代码
in_RSI  = input(defval=14, title="RSI",group = "RSI指标参数")
RSI =(ta.rsi(close,in_RSI)-50)*2

//KDJ代码
periodK = input.int(14, title="K长度", minval=1,group = "KDJ指标参数",inline='1')  //K长度，默认14、最小为1 
smoothK = input.int(1, title="K平滑", minval=1,group = "KDJ指标参数",inline='1')  //K平滑，默认1、最小为1 
periodD = input.int(3, title="D平滑", minval=1,group = "KDJ指标参数",inline='2')  //D长度，默认14、最小为1 
k = (ta.sma(ta.stoch(close, high, low, periodK), smoothK)-50)*2 // 计算K值
d = (ta.sma(k, periodD)-50)*2                                   // 计算D值

//TSI代码
long = input(title="长", defval=7,group = "TSI指标参数",inline='1')
short = input(title="短", defval=5,group = "TSI指标参数",inline='1')
price = close
double_smooth(src, long, short) =>
	fist_smooth = ta.ema(src, long)
	ta.ema(fist_smooth, short)
pc = ta.change(price)
double_smoothed_pc = double_smooth(pc, long, short)
double_smoothed_abs_pc = double_smooth(math.abs(pc), long, short)
tsi_value = 100 * (double_smoothed_pc / double_smoothed_abs_pc)

//集合代码
hist  = (RSI*0.4 + k*0.2 + d*0.2 + tsi_value*0.2)+10

//划线代码
plot(hist, title="集合线", color=#2962FF,style=plot.style_steplinebr)
h0 = hline(50, "Upper Band", color=#787B86)            // 画出上轨、定义颜色
h1 = hline(-50, "Lower Band", color=#787B86)            // 画出下轨、定义颜色

//下面是MACD背离代码**************************************************************************************************************
lbR = input(title="往右移动_根能量柱", defval=1, group="背离参数")       //定义往右移动 最多1个能量柱
lbL = input(title="往左移动_根能量柱", defval=3, group="背离参数")       //定义往左移动 最多3个能量柱
rangeUpper = input(title="最大移动_根", defval=60, group="背离参数")    //定义最大移动60个
rangeLower = input(title="最小移动_根", defval=2, group="背离参数")     //定义最小移动 2个
bullish() =>
    price_nearest = 99999.9        //最近的价格
    macd_nearest = 0.0             //最近的MACD
    macd_nearest_idx = 0           //最近的MACD柱距离
    price_furthest = 99999.9       //最远的价格
    macd_furthest = 0.0            //最远的MACD
    macd_furthest_idx = 0          //最远的MACD柱距离
    if (hist[1] < 0 and hist >= 0) or (hist[1] < 0 and barstate.islast)    //(上柱<零、 现柱>零)  或  (上柱<零、且是最后一根<零的K线)
        i = 1
        if barstate.islast                                           //如果当前k线为k线组的最后一条k线
            i := 0                                                   //将零赋值给 i    
        while hist[i] < 0                                          //上柱<零
            price_nearest := math.min(low[i], price_nearest)         //i 里面最小的赋值给price_nearest
            macd_nearest := math.min(hist[i], macd_nearest)        //i 里面最小的柱子赋值给macd_nearest
            if hist[i] == macd_nearest
                macd_nearest_idx := i
            i += 1
        while hist[i] >= 0
            i += 1
        while hist[i] < 0
            price_furthest := math.min(low[i], price_furthest)
            macd_furthest := math.min(hist[i], macd_furthest)
            if hist[i] == macd_furthest
                macd_furthest_idx := i
            i += 1  
        divergence = 'none'
        if price_nearest > price_furthest == false and macd_nearest > macd_furthest == true
            divergence := 'classic'
        if price_nearest > price_furthest == true and macd_nearest > macd_furthest == false
            divergence := 'hidden'
        [divergence, macd_nearest_idx, macd_furthest_idx]   
bearish() =>
    price_nearest = 0.0
    macd_nearest = 0.0
    macd_nearest_idx = 0
    price_furthest = 0.0
    macd_furthest = 0.0
    macd_furthest_idx = 0
    if (hist[1] > 0 and hist <= 0) or (hist[1] > 0 and barstate.islast)
        i = 1
        if barstate.islast
            i := 0   
        while hist[i] > 0
            price_nearest := math.max(high[i], price_nearest)
            macd_nearest := math.max(hist[i], macd_nearest)
            if hist[i] == macd_nearest
                macd_nearest_idx := i
            i += 1
        while hist[i] <= 0
            i += 1
        while hist[i] > 0
            price_furthest := math.max(high[i], price_furthest)
            macd_furthest := math.max(hist[i], macd_furthest)
            if hist[i] == macd_furthest
                macd_furthest_idx := i
            i += 1  
        divergence = 'none'
        if price_nearest > price_furthest == true and macd_nearest > macd_furthest == false
            divergence := 'classic'
        if price_nearest > price_furthest == false and macd_nearest > macd_furthest == true
            divergence := 'hidden'
        [divergence, macd_nearest_idx, macd_furthest_idx]
[a_divergence, a_idx_1, a_idx_2] = bullish()
if a_divergence == 'classic'
    line.new(x1=bar_index[a_idx_1], y1=hist[a_idx_1], x2=bar_index[a_idx_2], y2=hist[a_idx_2], color=color.green, width=1)  
if a_divergence == 'hidden'
    line.new(x1=bar_index[a_idx_1], y1=hist[a_idx_1], x2=bar_index[a_idx_2], y2=hist[a_idx_2], color=color.green, width=1)  

[divergence, idx_1, idx_2] = bearish()
if divergence == 'hidden'
    line.new(x1=bar_index[idx_1], y1=hist[idx_1], x2=bar_index[idx_2], y2=hist[idx_2], color=color.red, width=1)
if divergence == 'classic'
    line.new(x1=bar_index[idx_1], y1=hist[idx_1], x2=bar_index[idx_2], y2=hist[idx_2], color=color.red, width=1)

//下面是另外一组的MACD背离代码
plFound = na(ta.pivotlow(hist, lbL, lbR)) ? false : true    //此函数返回往： 左、右选的5个能量柱低点的价格。 如果没有枢轴低点、它返回“NaN”。
phFound = na(ta.pivothigh(hist, lbL, lbR)) ? false : true   //此函数返回往： 左、右选的5个能量柱高点的价格。 如果没有枢轴高点、它返回“NaN”。
_inRange(cond) =>
	bars = ta.barssince(cond == true)               //从上次条件为true起 、 计算K线数量
	rangeLower <= bars and bars <= rangeUpper       //K线数量 大于等于 最小移动选择的5个  、 小于等于 最大移动选择的60个
histHL = hist[lbR] > ta.valuewhen(plFound, hist[lbR], 1)   and _inRange(plFound[1])
priceLL = low[lbR]  <   ta.valuewhen(plFound, low[lbR], 1)
bullCond =  priceLL and histHL and plFound   //买的条件 = 底背离 +能量柱高后低 +能量柱高前低 + 左右选的5个能量柱低点的价格
plot(                           //  用于绘制图形
     plFound ? hist[lbR] : na,   //  表示如果 plFound 的值为真则绘制的是 hist[lbR] 的值；如果为假，则绘制的是 na。
     offset=-lbR,               //  表示图形相对于当前窗口的位置的偏移量
     title="经典看多",   //  表示图形的标题
     linewidth=1,               //  表示图形的线宽
     color=(bullCond ? color.green : na)   // 表示图形的颜色。如果 bullCond 的值为真则图形的颜色为 color.green  、 如果为假则图形的颜色为 noneColor
     )
histLH = hist[lbR] < ta.valuewhen(phFound, hist[lbR], 1) and _inRange(phFound[1])
priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1)
bearCond = priceHH and histLH and phFound
plot(
	 phFound ? hist[lbR] : na,
	 offset=-lbR,
	 title="经典看跌",
	 linewidth=1,
	 color=(bearCond ? color.red : na)
	 )
